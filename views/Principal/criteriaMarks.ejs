<!DOCTYPE html>
<html lang="en">
<%- include("nav") %>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Criteria Weightage</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script> <!-- Include Data Labels Plugin -->
    <style>
        /* Styling */
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            height: 100%;
            background: linear-gradient(120deg, #3a7bd5 0%, #3a6073 100%);
        }

        .container {
            width: 90%;
            color: white;
            padding: 25px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            margin: 20px auto;
            background-color: rgba(0, 0, 0, 0.7);
            height: 100%;
        }

        #graphContainer {
            margin-top: 30px;
            text-align: center;
        }

        canvas {
            margin: 20px auto;
            display: block;
            width: 30% !important; /* Increase width to 80% of the container */
            height: 350px !important; /* Increase height to 400px */
        }
        .buttons-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 20px;
        }

        .pagination-buttons {
            text-align: center;
            margin: 20px 0;
        }

        button {
            background-color: #00fc1982;
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s ease;
            margin: 0 10px;
        }

        button:hover {
            background-color: #2fd943;
        }

    </style>
</head>
<body>
    <div class="container">
        <center><h1><%=appraisal_cycle_name %></h1></center><br><br>
        <h2>Criteria Weightage</h2>
        <canvas id="criteriaChart"></canvas>

        <h3>Parameter Weightage (Click a criterion to view)</h3>
        <canvas id="parameterChart"></canvas>
        
        <div class="buttons-container">
            <!-- Add Go to Grade Page Button -->
            
            <button id="goToGradeButton">Go to Grade Page</button>

        </div>

    </div>
    
    <script>
        const goToGradeButton = document.getElementById('goToGradeButton');
    goToGradeButton.addEventListener('click', () => {
        const appraisalId = "<%= appraisal_id %>" // Replace with the actual appraisal_id if dynamic
        const totalMarks = criteriaData.reduce((total, item) => total + (parseInt(item.total_marks) || 0), 0); // Calculate total marks
        const url = `/principal/grade?appraisal_id=${appraisalId}&total_marks=${totalMarks}`;
        window.location.href = url;
    });
      const criteriaData = <%- JSON.stringify(criteriaData) %>;

// Prepare data for the Criteria Chart (including marks)
const criteriaNames = criteriaData.map(item => `${item.criteria_name} - ${item.total_marks} Marks`);
const criteriaMarks = criteriaData.map(item => item.total_marks || 0);

// Render the Criteria Chart with data labels
const criteriaCtx = document.getElementById('criteriaChart').getContext('2d');
const criteriaChart = new Chart(criteriaCtx, {
    type: 'pie',
    data: {
        labels: criteriaNames,
        datasets: [{
            label: 'Criteria Weightage',
            data: criteriaMarks,
            backgroundColor: ['#3498db', '#2ecc71', '#e74c3c', '#9b59b6', '#f1c40f'], // Add more colors
        }]
    },
    options: {
        responsive: true,
        plugins: {
            datalabels: {
                formatter: (value, ctx) => {
                    return value + ' Marks';
                },
                color: '#fff',
                font: {
                    weight: 'bold',
                    size: 14,
                },
                anchor: 'center',
                align: 'center',
            }
        },
        legend: {
            position: 'right',
            labels: {
                font: {
                    size: 14,
                    weight: 'bold'
                },
                boxWidth: 20,
                padding: 15
            }
        }
    },
    plugins: [ChartDataLabels]
});

// Variable to store the parameter chart instance
let parameterChartInstance;

// Handle click event to fetch parameter data dynamically
document.getElementById('criteriaChart').onclick = async function (evt) {
    const activePoint = criteriaChart.getElementsAtEventForMode(evt, 'nearest', { intersect: true }, false);
    if (activePoint.length > 0) {
        const index = activePoint[0].index;
        const selectedCriteria = criteriaData[index];

        // Fetch parameter data for selected criteria
        const response = await fetch(`/principal/criteriaParameters/${selectedCriteria.criteria_id}/${"<%= appraisal_id %>"}`);
        const result = await response.json();

        // Check if parameter data exists
        if (result.parameterData && result.parameterData.length > 0) {
            const parameterNames = result.parameterData.map(param => `${param.c_parameter_id}`);
            const parameterMarks = result.parameterData.map(param => param.parameter_marks);
            const parameterDescriptions = result.parameterData.map(param => param.parameter_description);

            if (parameterChartInstance) {
                parameterChartInstance.destroy();
            }

            const parameterCtx = document.getElementById('parameterChart').getContext('2d');
            parameterChartInstance = new Chart(parameterCtx, {
                type: 'bar', // Bar chart
                data: {
                    labels: parameterNames,
                    datasets: [{
                        label: 'Criteria Name: ' + selectedCriteria.criteria_name,
                        data: parameterMarks,
                        backgroundColor: '#2980b9',
                    }]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        } else {
            alert("No parameters found for this criterion.");
        }
    }
};

// Wrap the chart initialization in an async function
async function initializeChart() {
    if (criteriaData.length > 0) {
        const firstCriteria = criteriaData[0];
        const response = await fetch(`/principal/criteriaParameters/${firstCriteria.criteria_id}/${"<%= appraisal_id %>"}`);
        const result = await response.json();

        if (result.parameterData && result.parameterData.length > 0) {
            const parameterNames = result.parameterData.map(param => `${param.c_parameter_id}`);
            const parameterMarks = result.parameterData.map(param => param.parameter_marks);
            const parameterDescriptions = result.parameterData.map(param => param.parameter_description);

            const parameterCtx = document.getElementById('parameterChart').getContext('2d');
            parameterChartInstance = new Chart(parameterCtx, {
                type: 'bar',
                data: {
                    labels: parameterNames,
                    datasets: [{
                        label: 'Criteria Name: ' + firstCriteria.criteria_name,
                        data: parameterMarks,
                        backgroundColor: '#2980b9',
                    }]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        } else {
            alert("No parameters found for the first criterion.");
        }
    }
}

// Call the async function to load the default chart for the first criterion
initializeChart();

    </script>
</body>
</html>
